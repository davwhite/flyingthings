apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: training-x-pipeline
spec:
  params: 
    - name: GIT_URL
      default: https://github.com/redhat-na-ssa/flyingthings.git
      description: url of the git repo for the code of deployment
      type: string
    - name: GIT_REVISION
      default: main
      description: revision to be used from repo of the code for deployment
      type: string
    - name: NAMESPACE
      description: target deployment for the project
      type: string
    - name: BATCH_SIZE
      description: batch size for training NOTE* for CPU use a value of 2
      default: "-1"
      type: string
    - name: NUM_EPOCHS
      description: number of epochs for training
      default: "10"
      type: string
    - name: IMG_RESIZE
      description: flag to resize the source images before training
      default: "N"
      type: string
    - name: MAX_WIDTH
      description: maximum width for images when resizing
      default: "200"
      type: string
    - name: WEIGHTS
      description: target weights file name
      default: flyingthings.pt
      type: string
    - name: BASE_MODEL
      description: base model used to begin training
      default: yolov5s.pt
      type: string
    - name: MINIO_ENDPOINT
      description: endpoint of minio api
      default: http://minio:9000
      type: string
    - name: DATASET_ZIP
      description: name of the dataset zip file for training
      default: flyingthings-yolo.zip
      type: string
    - name: SIMPLEVIS_DATA
      description: mount point for work files during training
      default: /opt/app-root/src/simplevis-data
      type: string
    - name: MINIO_BUCKET
      description: bucket with training dataset and target of model artifacts
      default: flyingthings
      type: string
    - name: MINIO_ACCESSKEY
      description: access key for minio NOTE* use secrets for production
      default: minioadmin
      type: string
    - name: MINIO_SECRETKEY
      description: secret key for minio NOTE* use secrets for production
      default: minioadmin
      type: string
    - name: MINIO_CLIENT_URL
      description: location of minio client binary
      default: https://dl.min.io/client/mc/release/linux-amd64/mc
      type: string
    - name: DEPLOY
      description: flag for deploying model server along with model
      type: string
    - name: MODEL_NAME
      description: name used to deploy the model and model server
      type: string
    - name: GPU
      description: flag for use of GPU for training
      type: string
  tasks: 
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_URL)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.GIT_REVISION)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: sourcecode
    - name: get-dataset
      taskRef:
        name: get-dataset
      params:
        - name: DATASET_ZIP
          value: $(params.DATASET_ZIP)
        - name: MINIO_ENDPOINT
          value: $(params.MINIO_ENDPOINT)
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: MINIO_BUCKET
          value: $(params.MINIO_BUCKET)
        - name: MINIO_ACCESSKEY
          value: $(params.MINIO_ACCESSKEY)
        - name: MINIO_SECRETKEY
          value: $(params.MINIO_SECRETKEY)
        - name: MINIO_CLIENT_URL
          value: $(params.MINIO_CLIENT_URL)
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: create-classfile
      taskRef:
        name: create-classfile
      params:
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      runAfter:
        - get-dataset
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: image-resize
      when:
        - input: "$(params.IMG_RESIZE)"
          operator: in
          values: ["Y"]
      taskRef:
        name: image-resize
      params:
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: IMG_RESIZE
          value: "$(params.IMG_RESIZE)"
        - name: MAX_WIDTH
          value: "$(params.MAX_WIDTH)"
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      runAfter:
        - create-classfile
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: distribute-dataset
      taskRef:
        name: distribute-data
      params:
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
      runAfter:
        - image-resize
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: train-model-gpu
      when:
        - input: "$(params.GPU)"
          operator: in
          values: ["Y"]
      taskRef:
        name: train-model-gpu
      params:
        - name: BATCH_SIZE
          value: $(params.BATCH_SIZE)
        - name: NUM_EPOCHS
          value: $(params.NUM_EPOCHS)
        - name: WEIGHTS
          value: $(params.WEIGHTS)
        - name: BASE_MODEL
          value: $(params.BASE_MODEL)
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      runAfter:
        - distribute-dataset
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: train-model-cpu
      when:
        - input: "$(params.GPU)"
          operator: in
          values: ["N"]
      taskRef:
        name: train-model-cpu
      timeout: "2h"
      params:
        - name: BATCH_SIZE
          value: $(params.BATCH_SIZE)
        - name: NUM_EPOCHS
          value: $(params.NUM_EPOCHS)
        - name: WEIGHTS
          value: $(params.WEIGHTS)
        - name: BASE_MODEL
          value: $(params.BASE_MODEL)
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      runAfter:
        - distribute-dataset
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: export-model
      taskRef:
        name: export-model
      params:
        - name: WEIGHTS
          value: $(params.WEIGHTS)
        - name: BASE_MODEL
          value: $(params.BASE_MODEL)
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      runAfter:
        - train-model-cpu
        - train-model-gpu
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: push-results
      taskRef:
        name: push-results
      params:
        - name: WEIGHTS
          value: $(params.WEIGHTS)
        - name: MINIO_ENDPOINT
          value: $(params.MINIO_ENDPOINT)
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: MINIO_BUCKET
          value: $(params.MINIO_BUCKET)
        - name: MINIO_ACCESSKEY
          value: $(params.MINIO_ACCESSKEY)
        - name: MINIO_SECRETKEY
          value: $(params.MINIO_SECRETKEY)
        - name: MINIO_CLIENT_URL
          value: $(params.MINIO_CLIENT_URL)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
      runAfter:
        - export-model
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
    - name: deploy-model-x
      when:
        - input: "$(params.DEPLOY)"
          operator: in
          values: ["Y"]
      taskSpec:
        metadata:
          annotations:
            # operator.tekton.dev/last-applied-hash: 64d9014f8c7f4cd290afc619a32a185211cae3b23d56af70197b0e936ec8d35b
            tekton.dev/displayName: openshift client
            tekton.dev/pipelines.minVersion: 0.17.0
            tekton.dev/tags: cli
          labels:
            app.kubernetes.io/version: '0.2'
            operator.tekton.dev/operand-name: openshift-pipelines-addons
            operator.tekton.dev/provider-type: redhat
        params:
          - default: oc help
            description: The OpenShift CLI arguments to run
            name: SCRIPT
            type: string
          - default: latest
            description: The OpenShift Version to use
            name: VERSION
            type: string
        steps:
          - env:
              - name: HOME
                value: /tekton/home
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
            name: oc
            resources: {}
            script: |
              #!/usr/bin/env bash

              [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
              cd $(workspaces.manifest-dir.path)

              [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
              [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
              export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

              $(params.SCRIPT)
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
        workspaces:
          - name: manifest-dir
            optional: true
          - name: kubeconfig-dir
            optional: true
      workspaces:
        - name: source
          workspace: sourcecode
      runAfter:
        - push-results
      params:
      - name: NAMESPACE
        value: $(params.NAMESPACE)
      - name: MINIO_ENDPOINT
        value: $(params.MINIO_ENDPOINT)
      - name: MINIO_BUCKET
        value: $(params.MINIO_BUCKET)
      - name: MINIO_ACCESSKEY
        value: $(params.MINIO_ACCESSKEY)
      - name: MINIO_SECRETKEY
        value: $(params.MINIO_SECRETKEY)
      - name: MODEL_NAME
        value: $(params.MODEL_NAME)
      - name: SCRIPT
        value: |
          oc new-app image-registry.openshift-image-registry.svc:5000/$(params.NAMESPACE)/custom-model:latest \
            --name=$(params.MODEL_NAME) \
            --env=WEIGHTS=model_custom.pt \
            --env=SIMPLEVIS_DATA=/opt/app-root/src/simplevis-data \
            --env=MINIO_ENDPOINT=$(params.MINIO_ENDPOINT) \
            --env=MINIO_BUCKET=$(params.MINIO_BUCKET) \
            --env=MINIO_ACCESSKEY=$(params.MINIO_ACCESSKEY) \
            --env=MINIO_SECRETKEY=$(params.MINIO_SECRETKEY) \
          && oc set volume deployment/$(params.MODEL_NAME) \
            --add \
            --name=simplevis-data-volume \
            --type=emptyDir \
            --mount-path=/opt/app-root/src/simplevis-data \
          && oc apply -f - <<EOF
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: $(params.MODEL_NAME)
            labels:
              app: $(params.MODEL_NAME)
              app.kubernetes.io/component: $(params.MODEL_NAME)
              app.kubernetes.io/instance: $(params.MODEL_NAME)
          annotations:
            openshift.io/host.generated: "true"
          spec:
            to:
              kind: Service
              name: $(params.MODEL_NAME)
              weight: 100
            port:
              targetPort: 8000-tcp
            tls:
              termination: edge
              insecureEdgeTerminationPolicy: Allow
          EOF
  finally:
    - name: summary
      taskRef:
        name: training-summary
      params:
        - name: GIT_URL
          value: $(params.GIT_URL)
        - name: GIT_REVISION
          value: $(params.GIT_REVISION)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: BATCH_SIZE
          value: $(params.BATCH_SIZE)
        - name: NUM_EPOCHS
          value: $(params.NUM_EPOCHS)
        - name: IMG_RESIZE
          value: $(params.IMG_RESIZE)
        - name: MAX_WIDTH
          value: $(params.MAX_WIDTH)
        - name: WEIGHTS
          value: $(params.WEIGHTS)
        - name: BASE_MODEL
          value: $(params.BASE_MODEL)
        - name: MINIO_ENDPOINT
          value: $(params.MINIO_ENDPOINT)
        - name: DATASET_ZIP
          value: $(params.DATASET_ZIP)
        - name: SIMPLEVIS_DATA
          value: $(params.SIMPLEVIS_DATA)
        - name: MINIO_BUCKET
          value: $(params.MINIO_BUCKET)
        - name: MINIO_ACCESSKEY
          value: $(params.MINIO_ACCESSKEY)
        - name: MINIO_SECRETKEY
          value: $(params.MINIO_SECRETKEY)
        - name: MINIO_CLIENT_URL
          value: $(params.MINIO_CLIENT_URL)
        - name: DEPLOY
          value: $(params.DEPLOY)
        - name: MODEL_NAME
          value: $(params.MODEL_NAME)
        - name: GPU
          value: $(params.GPU)
      workspaces:
        - name: source
          workspace: sourcecode
        - name: workspace
          workspace: shared-workspace
  workspaces:
    - name: shared-workspace
    - name: sourcecode
