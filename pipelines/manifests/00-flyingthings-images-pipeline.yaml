apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: flyingthings-images-pipeline
spec:
  params:
    - name: git-url
      default: https://github.com/redhat-na-ssa/flyingthings.git
      description: url of the git repo for the code of deployment
      type: string
    - name: git-revision
      default: main
      description: revision to be used from repo of the code for deployment
      type: string
    - name: ocp-tablespace
      description: tablespace for the deployment
      type: string
    - name: YOLO_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/yolo:latest
      description: base image for yolo
      type: string
    - name: UBI_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/base-ubi9:latest
      description: base image for notebook
      type: string
    - name: MINIMAL_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/minimal-notebook:latest
      description: notebook template
      type: string
    - name: CUSTOM_NOTEBOOK_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/yolo-notebook:latest
      description: custom notebook image
      type: string
    - name: MODEL_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/custom-model:latest
      description: model server image
      type: string
    - name: YOLO_DOCKERFILE
      default: components/demo/containers/yolo
      description: dockerfile path 
      type: string
    - name: MODEL_DOCKERFILE
      default: source/model
      description: dockerfile path 
      type: string
    - name: UBI_DOCKERFILE
      default: components/demo/containers/ubi9
      description: dockerfile path 
      type: string
    - name: MINIMAL_DOCKERFILE
      default: source/minimal/py39
      description: dockerfile path 
      type: string
    - name: CUSTOM_DOCKERFILE
      default: source/custom
      description: dockerfile path
      type: string
    - name: MINIMAL_BUILD_ARGS
      default: --build-arg BASE_IMAGE=image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/base-ubi9:latest
      description: build arguments for minimal notebook
      type: string
    - name: MODEL_BUILD_ARGS
      default: --build-arg WEIGHTS=flyingthings.pt --build-arg BASE_IMAGE=image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/yolo:latest
      description: build arguments for model server
      type: string
    - name: CUSTOM_BUILD_ARGS
      default: --build-arg BASE_IMAGE=image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/minimal-notebook:latest
      description: build arguments for custom notebook
      type: string
    - name: BATCH_SIZE
      default: "2"
      type: string
    - name: NUM_EPOCHS
      default: "3"
      type: string
    - name: WEIGHTS
      default: "flyingthings.pt"
      type: string
    - name: BASE_MODEL
      default: "model_pretrained.pt"
      type: string
    - name: MINIO_ENDPOINT
      default: "http://minio:9000"
      type: string
    - name: DATASET_ZIP
      default: "flyingthings-yolo.zip"
      type: string
    - name: SIMPLEVIS_DATA
      default: "/opt/app-root/src/simplevis-data"
      type: string
    - name: BASEDIR
      default: "/opt/app-root/src"
      type: string
    - name: MINIO_BUCKET
      default: "flyingthings"
      type: string
    - name: MINIO_ACCESSKEY
      default: "minioadmin"
      type: string
    - name: MINIO_SECRETKEY
      default: "minioadmin"
      type: string
    - name: MINIO_CLIENT_URL
      default: "https://dl.min.io/client/mc/release/linux-amd64"
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.git-url)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.git-revision)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: source
    - name: see-stuff
      taskSpec:
        steps:
          - name: run-batch-file
            image: ubi9:latest
            script: |
              #!/usr/bin/env bash
              echo "Let's see what we got here..." \
              && ls -al $(workspaces.workspace.path)
      runAfter:
        - upload-artifacts
      workspaces:
        - name: workspace
          workspace: shared-workspace
    - name: build-yolo
      params:
        - name: IMAGE
          value: $(params.YOLO_IMAGE)
        - name: DOCKERFILE_PATH
          value: $(params.YOLO_DOCKERFILE)          
        - name: DOCKERFILE
          value: $(workspaces.path)/$(params.YOLO_DOCKERFILE)/Dockerfile
      runAfter:
        - see-stuff
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: source
    - name: build-ubi9
      params:
        - name: IMAGE
          value: $(params.UBI_IMAGE)
        - name: DOCKERFILE_PATH
          value: $(params.UBI_DOCKERFILE)          
        - name: DOCKERFILE
          value: $(workspaces.path)/$(params.UBI_DOCKERFILE)/Dockerfile
      runAfter:
        - see-stuff
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: source
    - name: deploy-minio
      taskSpec:
        metadata:
          annotations:
            # operator.tekton.dev/last-applied-hash: 64d9014f8c7f4cd290afc619a32a185211cae3b23d56af70197b0e936ec8d35b
            tekton.dev/displayName: openshift client
            tekton.dev/pipelines.minVersion: 0.17.0
            tekton.dev/tags: cli
          labels:
            app.kubernetes.io/version: '0.2'
            operator.tekton.dev/operand-name: openshift-pipelines-addons
            operator.tekton.dev/provider-type: redhat
        description: >-
          This task runs commands against the cluster provided by user and if not
          provided then where the Task is being executed.

          OpenShift is a Kubernetes distribution from Red Hat which provides oc, the
          OpenShift CLI that complements kubectl for simplifying deployment and
          configuration applications on OpenShift.
        params:
          - default: oc help
            description: The OpenShift CLI arguments to run
            name: SCRIPT
            type: string
          - default: latest
            description: The OpenShift Version to use
            name: VERSION
            type: string
        steps:
          - env:
              - name: HOME
                value: /tekton/home
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
            name: oc
            resources: {}
            script: |
              #!/usr/bin/env bash

              [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
              cd $(workspaces.manifest-dir.path)

              [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
              [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
              export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

              $(params.SCRIPT)
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
        workspaces:
          - description: >-
              The workspace which contains kubernetes manifests which we want to apply
              on the cluster.
            name: manifest-dir
            optional: true
          - description: >-
              The workspace which contains the the kubeconfig file if in case we want to
              run the oc command on another cluster.
            name: kubeconfig-dir
            optional: true
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - fetch-repository
      params:
      - name: SCRIPT
        value: |
          oc apply -k $(workspaces.source.path)/source/minio
    - name: create-bucket
      taskRef:
        name: create-bucket
      params:
        - name: SIMPLEVIS_DATA
          value: "$(params.SIMPLEVIS_DATA)"
        - name: MINIO_ENDPOINT
          value: $(params.MINIO_ENDPOINT)
        - name: MINIO_BUCKET
          value: $(params.MINIO_BUCKET)
        - name: MINIO_ACCESSKEY
          value: $(params.MINIO_ACCESSKEY)
        - name: MINIO_SECRETKEY
          value: $(params.MINIO_SECRETKEY)
        - name: MINIO_CLIENT_URL
          value: $(params.MINIO_CLIENT_URL)
      runAfter:
        - deploy-minio
      workspaces:
        - name: source
          workspace: source
        - name: workspace
          workspace: shared-workspace
    - name: upload-artifacts
      taskRef:
        name: upload-artifacts
      params:
        - name: SIMPLEVIS_DATA
          value: "$(params.SIMPLEVIS_DATA)"
        - name: MINIO_ENDPOINT
          value: $(params.MINIO_ENDPOINT)
        - name: MINIO_BUCKET
          value: $(params.MINIO_BUCKET)
        - name: MINIO_ACCESSKEY
          value: $(params.MINIO_ACCESSKEY)
        - name: MINIO_SECRETKEY
          value: $(params.MINIO_SECRETKEY)
        - name: MINIO_CLIENT_URL
          value: $(params.MINIO_CLIENT_URL)
      runAfter:
        - create-bucket
      workspaces:
        - name: source
          workspace: source
        - name: workspace
          workspace: shared-workspace
    - name: get-pretrained
      taskRef:
        name: get-pretrained
      params:
        - name: WEIGHTS
          value: $(params.WEIGHTS)
        - name: BASE_MODEL
          value: "$(params.BASE_MODEL)"
        - name: SIMPLEVIS_DATA
          value: "$(params.SIMPLEVIS_DATA)"
        - name: MINIO_ENDPOINT
          value: $(params.MINIO_ENDPOINT)
        - name: MINIO_BUCKET
          value: $(params.MINIO_BUCKET)
        - name: MINIO_ACCESSKEY
          value: $(params.MINIO_ACCESSKEY)
        - name: MINIO_SECRETKEY
          value: $(params.MINIO_SECRETKEY)
        - name: MINIO_CLIENT_URL
          value: $(params.MINIO_CLIENT_URL)
        - name: ocp-tablespace
          value: $(params.ocp-tablespace)
      runAfter:
        - build-yolo
      workspaces:
        - name: source
          workspace: source
        - name: workspace
          workspace: shared-workspace
    - name: build-model-server
      params:
        - name: IMAGE
          value: $(params.MODEL_IMAGE)
        - name: DOCKERFILE_PATH
          value: $(params.MODEL_DOCKERFILE)          
        - name: DOCKERFILE
          value: $(workspaces.path)/$(params.MODEL_DOCKERFILE)/Dockerfile
        - name: BUILD_EXTRA_ARGS
          value: "$(params.MODEL_BUILD_ARGS)"
      runAfter:
        - get-pretrained
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: source
    - name: deploy-model-server
      taskSpec:
        metadata:
          annotations:
            # operator.tekton.dev/last-applied-hash: 64d9014f8c7f4cd290afc619a32a185211cae3b23d56af70197b0e936ec8d35b
            tekton.dev/displayName: openshift client
            tekton.dev/pipelines.minVersion: 0.17.0
            tekton.dev/tags: cli
          labels:
            app.kubernetes.io/version: '0.2'
            operator.tekton.dev/operand-name: openshift-pipelines-addons
            operator.tekton.dev/provider-type: redhat
        description: >-
          This task runs commands against the cluster provided by user and if not
          provided then where the Task is being executed.

          OpenShift is a Kubernetes distribution from Red Hat which provides oc, the
          OpenShift CLI that complements kubectl for simplifying deployment and
          configuration applications on OpenShift.
        params:
          - default: oc help
            description: The OpenShift CLI arguments to run
            name: SCRIPT
            type: string
          - default: latest
            description: The OpenShift Version to use
            name: VERSION
            type: string
        steps:
          - env:
              - name: HOME
                value: /tekton/home
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
            name: oc
            resources: {}
            script: |
              #!/usr/bin/env bash

              [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
              cd $(workspaces.manifest-dir.path)

              [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
              [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
              export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

              $(params.SCRIPT)
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
        workspaces:
          - description: >-
              The workspace which contains kubernetes manifests which we want to apply
              on the cluster.
            name: manifest-dir
            optional: true
          - description: >-
              The workspace which contains the the kubeconfig file if in case we want to
              run the oc command on another cluster.
            name: kubeconfig-dir
            optional: true
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - build-model-server
      params:
      - name: ocp-tablespace
        value: $(params.ocp-tablespace)
      - name: MINIO_ENDPOINT
        value: $(params.MINIO_ENDPOINT)
      - name: MINIO_BUCKET
        value: $(params.MINIO_BUCKET)
      - name: MINIO_ACCESSKEY
        value: $(params.MINIO_ACCESSKEY)
      - name: MINIO_SECRETKEY
        value: $(params.MINIO_SECRETKEY)
      - name: SCRIPT
        value: |
          oc new-app image-registry.openshift-image-registry.svc:5000/$(params.ocp-tablespace)/custom-model:latest \
            --name=model-yolo \
            --env=WEIGHTS=model_pretrained.pt \
            --env=SIMPLEVIS_DATA=/opt/app-root/src/simplevis-data \
            --env=MINIO_ENDPOINT=$(params.MINIO_ENDPOINT) \
            --env=MINIO_BUCKET=$(params.MINIO_BUCKET) \
            --env=MINIO_ACCESSKEY=$(params.MINIO_ACCESSKEY) \
            --env=MINIO_SECRETKEY=$(params.MINIO_SECRETKEY) \
          && oc set volume deployment/model-yolo \
            --add \
            --name=simplevis-data-volume \
            --type=emptyDir \
            --mount-path=/opt/app-root/src/simplevis-data \
          && oc apply -f - <<EOF
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: model-yolo
            labels:
              app: model-yolo
              app.kubernetes.io/component: model-yolo
              app.kubernetes.io/instance: model-yolo
          annotations:
            openshift.io/host.generated: "true"
          spec:
            to:
              kind: Service
              name: model-yolo
              weight: 100
            port:
              targetPort: 8000-tcp
            tls:
              termination: edge
              insecureEdgeTerminationPolicy: Allow
          EOF
  workspaces:
    - name: shared-workspace
    - name: source