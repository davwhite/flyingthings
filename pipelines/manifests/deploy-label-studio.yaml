apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: deploy-label-studio
spec:
  params:
    - name: GIT_URL
      default: https://github.com/redhat-na-ssa/flyingthings.git
      description: url of the git repo for the code of deployment
      type: string
    - name: GIT_REVISION
      default: cory-review
      description: revision to be used from repo of the code for deployment
      type: string
    - name: NAMESPACE
      description: namespace for the deployment
      default: modemo
      type: string
    - name: LABELSTUDIO_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.NAMESPACE)/labelstudio:latest
      description: image for label studio
      type: string
    - name: LABELSTUDIO_DOCKERFILE
      default: source/labelstudio
      description: dockerfile path 
      type: string
    - name: DEPLOY_LABELSTUDIO
      default: 'Y'
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_URL)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.GIT_REVISION)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: source
    - name: build-label-studio
      params:
        - name: IMAGE
          value: $(params.LABELSTUDIO_IMAGE)
        - name: CONTEXT
          value: $(params.LABELSTUDIO_DOCKERFILE)
        - name: DOCKERFILE
          value: ./Dockerfile
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: source
    - name: deploy-label-studio
      when:
        - input: "$(params.DEPLOY_LABELSTUDIO)"
          operator: in
          values: ["Y"]
      taskSpec:
        metadata:
          annotations:
            # operator.tekton.dev/last-applied-hash: 64d9014f8c7f4cd290afc619a32a185211cae3b23d56af70197b0e936ec8d35b
            tekton.dev/displayName: openshift client
            tekton.dev/pipelines.minVersion: 0.17.0
            tekton.dev/tags: cli
          labels:
            app.kubernetes.io/version: '0.2'
            operator.tekton.dev/operand-name: openshift-pipelines-addons
            operator.tekton.dev/provider-type: redhat
        description: >-
          This task runs commands against the cluster provided by user and if not
          provided then where the Task is being executed.

          OpenShift is a Kubernetes distribution from Red Hat which provides oc, the
          OpenShift CLI that complements kubectl for simplifying deployment and
          configuration applications on OpenShift.
        params:
          - default: oc help
            description: The OpenShift CLI arguments to run
            name: SCRIPT
            type: string
          - default: latest
            description: The OpenShift Version to use
            name: VERSION
            type: string
        steps:
          - env:
              - name: HOME
                value: /tekton/home
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
            name: oc
            resources: {}
            script: |
              #!/usr/bin/env bash

              [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
              cd $(workspaces.manifest-dir.path)

              [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
              [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
              export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

              $(params.SCRIPT)
              exit 0
        workspaces:
          - description: >-
              The workspace which contains kubernetes manifests which we want to apply
              on the cluster.
            name: manifest-dir
            optional: true
          - description: >-
              The workspace which contains the the kubeconfig file if in case we want to
              run the oc command on another cluster.
            name: kubeconfig-dir
            optional: true
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - build-label-studio
      params:
      - name: NAMESPACE
        value: $(params.NAMESPACE)
      - name: SCRIPT
        value: |
          oc apply -f $(workspaces.source.path)/source/labelstudio/deployment.yaml \
          
          # oc new-app image-registry.openshift-image-registry.svc:5000/$(params.NAMESPACE)/labelstudio:latest \
          #   --name=labelstudio
          
          # oc set volume deployment/labelstudio \
          #   --add \
          #   --name=labelstudio-pvc \
          #   --type=persistentVolumeClaim \
          #   --claim-name=labelstudio-pvc \
          #   --mount-path=/opt/app-root/src/.local \
          #   --overwrite
          
          # oc apply -f - <<EOF
          # apiVersion: route.openshift.io/v1
          # kind: Route
          # metadata:
          #   name: labelstudio
          #   labels:
          #     app: labelstudio
          #     app.kubernetes.io/component: labelstudio
          #     app.kubernetes.io/instance: labelstudio
          # annotations:
          #   openshift.io/host.generated: "true"
          # spec:
          #   to:
          #     kind: Service
          #     name: labelstudio
          #     weight: 100
          #   port:
          #     targetPort: 8080-tcp
          #   tls:
          #     termination: edge
          #     insecureEdgeTerminationPolicy: Allow
          # EOF
  workspaces:
    - name: source
